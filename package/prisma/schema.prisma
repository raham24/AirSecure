// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  email     String    @unique
  password  String
  isAdmin   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[]
  tickets   Ticket[] 
}


model Session {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}
 
model Ticket {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  priority    String
  status      String
  created     DateTime @default(now())
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
}


enum ScanStatus {
  idle
  requested
  running
  completed
}

model Device {
  id           Int         @id @default(autoincrement())
  name         String
  serialNumber String      @unique
  isActive     Boolean     @default(true)
  scan_status  ScanStatus
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  scans        Scan[]
}



model Scan {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  apn       String
  status    String   @default("completed") // completed, failed, pending
  deviceId  Int
  device    Device   @relation(fields: [deviceId], references: [id])
}
